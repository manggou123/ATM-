#include"stdio.h"
#include"stdlib.h"
#include"string.h"
#include"time.h"
#include"cstdio"
#include"windows.h"
#include"conio.h"
#include"iostream"
#include"cstdlib"
#include"ctime"
#include"cmath"



//光标定位
HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);
COORD coord;

void start();

//中文
void C_Sign_Up();//中文注册
void C_Sign_In();//中文登录 
void C_Main_Menu();//中文菜单页

void C_DepositMoney();//存豆业务
void C_DepositMoney1();//存豆失败选项
void C_DepositMoney2();//存豆成功选项
void C_Withdraw_Money();//取豆业务
void C_Withdraw_Money1();
void C_Withdraw_Money2();
void C_Transfer_Money();//转豆业务
void C_Transfer_Money1();
void C_Transfer_Money2();

void C_Enquiry();//查询业务
void C_Enquiry_balance();//查询余豆
void C_Enquiry_Information();//查询个人信息
void C_Enquiry_Record();//查询流水记录

void C_Change_Information();//修改信息选项页
void C_Change_User();//修改用户名称
void C_Change_AccountNum();//修改账户
void C_Change_phone();//修改联系电话
void C_Change_Password();//修改密码

//English
void E_Sign_Up();//英文注册
void E_Sign_In();//英文登录 
void E_Main_Menu();//中文菜单页

void E_DepositMoney();//存豆业务
void E_Withdraw_Money();//取豆业务
void E_Transfer_Money();//转账业务

void E_Enquiry();//查询业务
void E_Enquiry_balance();//查询余豆
void E_Enquiry_Information();//查询个人信息
void E_Enquiry_Record();//查询流水记录

void E_Change_Information();//修改信息选项页
void E_Change_User();//修改用户名称
void E_Change_AccountNum();//修改账户
void E_Change_phone();//修改联系电话
void E_Change_Password();//修改密码

//中文简洁
void C_Easy_Main_Menu();
void C_Easy_DepositMoney1();
void C_Easy_DepositMoney2();
void C_Easy_Withdraw_Money1();
void C_Easy_Withdraw_Money2();
void C_Easy_Transfer_Money1();
void C_Easy_Transfer_Money2();

//CE
void gotoxy();
void getPassword();
void CE_Time();//系统时间
void CE_Close_Account();//注销账户
void CE_Close_Account1();
void CE_Save_User_Data();       //保存用户数据
void CE_Save_Transaction_Data();//保存交易数据
void CE_Initial_Password();           //初始化密码函数
void CE_Initialize_User_Data();       //初始化用户数据
void CE_Initialize_Transaction_Data();//初始化交易数据
void CE_Set_Name();          //中英文设置姓名
void CE_Set_Password();      //中英文设置密码
void CE_Set_PhoneNumber();   //中英文设置电话号码
void CE_Add_Account_Number();//中英文设置账户号码函数
void CE_Game_Transaction();    //游戏收入交易
void CE_GameOut_Transaction(); //游戏支出交易
void CE_Deposit_Transaction(); //存豆交易
void CE_Withdraw_Transaction();//取豆交易
void CE_Transfer_Transaction();//转豆交易
void CE_Print_Transaction();//打印交易记录
void CE_Game();
void CE_Game_KK();
void TCS();//贪吃蛇游戏
void hide();
void print_wall();
void print_snake();
bool is_correct();
bool print_food();
bool go_ahead();
void locate();
void STJDB();//猜拳游戏
void DZ();//打字游戏

int Language, Sin,Bank; 
int Random_Number;//随机数
int AccountNum1 = 1231231000;//一号很行
int AccountNum2 = 1231232000;//二号很行
int AccountNum3 = 1231233000;//三号很行
int TCSm, TCSn;
char str[50];


struct TCSnode
{
	int x, y;
}snake[1000];
int snake_length, dir;
TCSnode food;
int direct[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };


//用户信息
struct Account
{
	//char bank[100];//银行
	char name[100];//用户名称
	char account_number[50];//账户账号
	char phone_number[12];//电话号码
	char password[10];//密码
	float balance;//余豆

	struct Account* next;
};

//交易信息
struct Trade
{
	char Taccount_number[50];//账户账号
	char Time[100];//时间
	char Operation[100];//操作类型
	char TarUse[50];//目标账户账号
	float Money;//操作数量

	struct Trade* Tnext;
};

typedef struct Account Account;
typedef struct Trade Trade;

Account* Pset = (Account*)malloc(sizeof(Account));
Account* head = NULL;
Account* tail = NULL;
Account* curAccount;
Account* curAccountO;
Account* curAccount1;
Account* curAccount2;
Account* curAccount3;
Account IV;








Trade* Thead = NULL;
Trade* Ttail = NULL;
Trade* TcurAccount;
Trade TA;
char tmp1[100];

//选项光标
void gotoxy(int xpos, int ypos)
{
	COORD scrn;
	HANDLE hOuput = GetStdHandle(STD_OUTPUT_HANDLE);
	scrn.X = xpos; scrn.Y = ypos;
	SetConsoleCursorPosition(hOuput, scrn);
}
using namespace std;


//游戏界面
void CE_Game()
{
	int a, a1, k = 0;
	while (k < 3)
	{
		printf("\n【小游戏攒豆】\t\t\t\t\t\t\t\t\t\t%s", tmp1);
		printf("\n==================================================================================================\n");
		printf("\n\n\t\t【1】贪吃蛇\n");
		printf("\n\n\t\t【2】猜拳游戏\n");
		printf("\n\n\t\t【3】打字游戏\n");
		printf("\n\n\t\t【4】返回主页\n");
		printf("\n\n\t\t【0】退出系统\n");
		printf("\n\n\t\t\t你的选择：___\b\b\b");
		scanf("%d", &a);
		switch (a)
		{
		case 1:
			system("cls");
			k = 0;
			while (k < 3)
			{
				printf("\n【贪吃蛇】\t\t\t\t\t\t\t\t\t\t%s", tmp1);
				printf("\n==================================================================================================\n");
				printf("\t|----------------------贪吃蛇-----------------------\n");
				printf("\t|【1】请注意窗口大小,以免发生错位.建议将窗口调为最大。\n\t|\n");
				printf("\t|【2】先选择难度.请在1-10中输入1个数,1最简单,10则最难。\n\t|\n");
				printf("\t|【3】游戏结束后,可获得长度X100豆的奖励，加油攒豆吧。\n\t|\n");
				printf("\t|【4】进入游戏后将自动扣取您的欢乐豆，告知后，不能退还。\n\t|\n");
				printf("\t|【5】进入游戏画面后,以*方向键*控制方向.祝你游戏愉快!\n");
				printf("\t|---------------------------------------------------\n");
				printf("\n\n\t\t【价格￥】1000豆/局\n");
				printf("\n\n\t\t【1】购买后继续游戏\n");
				printf("\n\n\t\t【2】返回上一页\n");
				printf("\n\n\t\t【3】返回主页\n");
				printf("\n\n\t\t【0】退出系统\n");
				printf("\n\n\t\t\t你的选择：___\b\b\b");
				scanf("%d", &a1);
				switch (a1)
				{
				case 1:
					system("cls");
					TCS();
					k = 3;
					break;
				case 2:
					system("cls");
					CE_Game();
					k = 3;
					break;
				case 3:
					system("cls");
					C_Main_Menu();
					k = 3;
					break;
				case 0:
					system("cls");
					k = 3;
					CE_Save_User_Data();
					exit(0);
				default:
					k++;
					break;
				}
			}
			k = 3;
			break;
		case 2:
			system("cls");
			k = 0;
			while (k < 3)
			{
				printf("\n【猜拳游戏】\t\t\t\t\t\t\t\t\t\t%s", tmp1);
				printf("\n==================================================================================================\n");
				printf("\t|----------------------猜拳游戏-----------------------\n");
				printf("\t|【1】这是一个猜拳的小游戏，你根据你的想法出拳打败电脑。\n\t|\n");
				printf("\t|【2】电脑为随机出拳，每次游戏将消耗您所确定筹码等额的欢乐豆。\n\t|\n");
				printf("\t|【3】筹码需为100的整数，单次押注不得超过10000，否者无效。\n\t|\n");
				printf("\t|【4】您和电脑打成平手，系统将加赠奖励你100欢乐豆以示鼓励。\n\t|\n");
				printf("\t|【5】每打败电脑，你将获得你筹码两倍的欢乐豆，祝你游戏愉快!\n");
				printf("\t|-----------------------------------------------------\n");
				printf("\n\n\t\t【1】开始游戏\n");
				printf("\n\n\t\t【2】返回上一页\n");
				printf("\n\n\t\t【3】返回主页\n");
				printf("\n\n\t\t【0】退出系统\n");
				printf("\n\n\t\t\t你的选择：___\b\b\b");
				scanf("%d", &a1);
				switch (a1)
				{
				case 1:
					system("cls");
					STJDB();
					k = 3;
					break;
				case 2:
					system("cls");
					CE_Game();
					k = 3;
					break;
				case 3:
					system("cls");
					C_Main_Menu();
					k = 3;
					break;
				case 0:
					system("cls");
					k = 3;
					CE_Save_User_Data();
					exit(0);
				default:
					k++;
					break;
				}
			}
			k = 3;
			break;
		case 3:
			system("cls");
			k = 0;
			while (k < 3)
			{
				printf("\n【打字游戏】\t\t\t\t\t\t\t\t\t\t%s", tmp1);
				printf("\n==================================================================================================\n");
				printf("\t|------------------------打字游戏-------------------------\n\t|\n");
				printf("\t|【1】输入任意键开始，根据屏幕显示输入字符，输入正确有*号提示。\n\t|\n");
				printf("\t|【2】游戏过程中可按 ESC 暂停或结束游戏，并获得游戏豆奖励。\n\t|\n");
				printf("\t|【3】此游戏仅需100豆/局，可提升玩家的反应能力 打字速度 视力。\n\t|\n");
				printf("\t|【4】10个以下无奖金，10个起 每正确10个可获得100欢乐豆的奖励。\n\t|\n");
				printf("\t|【5】告知扣款后将无法追后退款，最后.祝你游戏愉快!\n");
				printf("\t|-------------------------------------------------------\n");
				printf("\n\n\t\t【1】开始游戏\n");
				printf("\n\n\t\t【2】返回上一页\n");
				printf("\n\n\t\t【3】返回主页\n");
				printf("\n\n\t\t【0】退出系统\n");
				printf("\n\n\t\t\t你的选择：___\b\b\b");
				float z;
				scanf("%d", &a1);
				switch (a1)
				{
				case 1:
					system("cls");
					TA.Money = -100.00;
					z = -TA.Money;
					printf("\n\t\t\t已经收取您的%0.2f欢乐豆，已告知。\n", z);
					CE_Game_KK();
					DZ();
					k = 3;
					break;
				case 2:
					system("cls");
					CE_Game();
					k = 3;
					break;
				case 3:
					system("cls");
					C_Main_Menu();
					k = 3;
					break;
				case 0:
					system("cls");
					k = 3;
					CE_Save_User_Data();
					exit(0);
				default:
					k++;
					break;
				}
			}
			k = 3;
			break;
		case 4:
			system("cls");
			C_Main_Menu();
			k = 3;
			break;
		case 0:
			system("cls");
			k = 3;
			CE_Save_User_Data();
			exit(0);
		default:
			k++;
			break;
		}
	}
}
//光标
void locate(int x, int y)
{
	coord.X = y;
	coord.Y = x;
	SetConsoleCursorPosition(hout, coord);
};
//隐藏光标
void hide()
{
	CONSOLE_CURSOR_INFO cursor_info = { 1,0 };
	SetConsoleCursorInfo(hout, &cursor_info);
}
//生成随机数
double random(double start, double end)
{
	return start + (end - start) * rand() / (RAND_MAX + 1.0);
}
//贪吃蛇输出墙
void print_wall()
{
	printf(" ");
	for (int i = 1; i <= TCSn; i++)
		printf("-");
	printf("\n");
	for (int j = 0; j <= TCSm - 1; j++)
	{
		printf("|");
		for (int i = 1; i <= TCSn; i++) printf(" ");
		printf("|\n");
	}
	printf(" ");
	for (int i = 1; i <= TCSn; i++)
		printf("-");
}
//贪吃蛇输出墙
void print_snake()
{
	locate(snake[0].x, snake[0].y);
	printf("O");
	for (int i = 1; i <= snake_length - 1; i++)
	{
		locate(snake[i].x, snake[i].y);
		printf("o");
	}
}
//判断是否撞墙或者自撞
bool is_correct()
{
	if (snake[0].x == 0 || snake[0].y == 0 || snake[0].x == TCSm + 1 || snake[0].y == TCSn + 1) return false;
	for (int i = 1; i <= snake_length - 1; i++)
	{
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) return false;
	}
	return true;
}
//随机生成并输出食物位置
bool print_food()
{
	srand((unsigned)time(0));
	bool e;
	while (1)
	{
		e = true;
		int i = (int)random(0, TCSm) + 1, j = (int)random(0, TCSn) + 1;
		food.x = i; food.y = j;
		for (int k = 0; k <= snake_length - 1; k++)
		{
			if (snake[k].x == food.x && snake[k].y == food.y)
			{
				e = false; break;
			}
		}
		if (e) break;
	}
	locate(food.x, food.y);
	printf("8");
	return true;
}
//蛇的前进
bool go_ahead()
{
	TCSnode temp;
	bool e = false;
	temp = snake[snake_length - 1];
	for (int i = snake_length - 1; i >= 1; i--)
		snake[i] = snake[i - 1];
	snake[0].x += direct[dir][0];
	snake[0].y += direct[dir][1];
	locate(snake[1].x, snake[1].y);
	printf("o");
	/*** 吃到了食物 ***/
	if (snake[0].x == food.x && snake[0].y == food.y)
	{
		snake_length++;
		e = true;
		snake[snake_length - 1] = temp;
	}
	/*** 输出此时蛇状态 ***/
	if (!e)
	{
		locate(temp.x, temp.y);
		printf(" ");
	}
	else
		print_food();
	locate(snake[0].x, snake[0].y);
	printf("O");
	/*** 如果自撞 ***/
	if (!is_correct())
	{
		system("cls");
		TA.Money = snake_length * 100.00;
		float z = TA.Money;
		curAccount->balance = curAccount->balance + TA.Money;
		printf("\n\t\t\t你输了！\n");
		printf("\n\t\t\t你的成绩为：%d\n", snake_length);
		printf("\n\t\t\t你获得的奖励为：%0.2f欢乐豆，请查收！\n", z);
		CE_Game_Transaction();
		int a, k = 0;
		while (k < 3)
		{
			printf("\n\n\t\t【1】重新开始游戏\n");
			printf("\n\n\t\t【2】退出游戏\n");
			printf("\n\n\t\t【3】返回主页\n");
			printf("\n\n\t\t【0】退出系统\n");
			printf("\n\n\t\t\t你的选择：___\b\b\b");
			scanf("%d", &a);
			switch (a)
			{
			case 1:
				system("cls");
				TCS();
				k = 3;
				break;
			case 2:
				system("cls");
				CE_Game();
				k = 3;
				break;
			case 3:
				system("cls");
				C_Main_Menu();
				k = 3;
				break;
			case 0:
				system("cls");
				k = 3;
				CE_Save_User_Data();
				exit(0);
			default:
				k++;
				break;
			}
		}
		return false;
	}
	return true;
}
//贪吃蛇游戏
void TCS()
{
	TA.Money = -1000.00;
	float z = -TA.Money;
	CE_Game_KK();
	printf("\n\t\t\t已经收取您的%0.2f欢乐豆，已告知。\n", z);
	TCSm = 25;
	TCSn = 40;
	if (TCSm < 10 || TCSn < 10 || TCSm>25 || TCSn>40)
	{
		printf("\n\t\t\tERROR\n");
		system("pause");
		exit(0);
	}
	int hard;
	printf("\n\n\n\n\t\t\t\t选择难度为：__\b\b");
	scanf("%d", &hard);
	if (hard <= 0 || hard > 100)
	{
		printf("\n\t\t\tERROR\n");
		system("pause");
		exit(0);
	}
	/*** 数据全部初始化，包括蛇长，位置，方向 ***/
	snake_length = 5;
	clock_t a, b;
	char ch;
	double hard_len;
	for (int i = 0; i <= 4; i++)
	{
		snake[i].x = 1;
		snake[i].y = 5 - i;
	}
	dir = 3;
	/*** 输出初始地图，蛇与食物 ***/
	system("cls");
	hide();
	print_wall();
	print_food();
	print_snake();
	locate(TCSm + 2, 0);
	printf("现在的长度:");
	/*** 开始游戏 ***/
	while (1)
	{
		/*** 难度随长度增加而提高 ***/
		hard_len = (double)snake_length / (double)(TCSm * TCSn);
		/*** 调节时间，单位是ms ***/
		a = clock();
		while (1)
		{
			b = clock();
			if (b - a >= (int)(400 - 30 * hard) * (1 - sqrt(hard_len))) break;
		}
		/*** 接受键盘输入的上下左右，并以此改变方向 ***/
		if (kbhit())
		{
			ch = getch();
			if (ch == -32)
			{
				ch = getch();
				switch (ch)
				{
				case 72:
					if (dir == 2 || dir == 3)
						dir = 0;
					break;
				case 80:
					if (dir == 2 || dir == 3)
						dir = 1;
					break;
				case 75:
					if (dir == 0 || dir == 1)
						dir = 2;
					break;
				case 77:
					if (dir == 0 || dir == 1)
						dir = 3;
					break;
				}
			}
		}
		/*** 前进 ***/
		if (!go_ahead()) break;
		/*** 在最后输出此时长度 ***/
		locate(TCSm + 2, 12);
		printf("%d", snake_length);
	}
	system("pause");
	exit(0);
}

//猜拳游戏
void STJDB()
{
	int gamer;   // 玩家出拳
	int CM;      //筹码
	int computer;// 电脑出拳
	srand((unsigned)time(NULL));  // 随机数种子
	computer = (rand() % 3) + 1;        // 产生随机数并取余，得到电脑出拳
	printf("\n\n\t\t\t请输入你的筹码：_____\b\b\b\b\b\n\n");
	scanf("%d", &CM);
	TA.Money = CM * -1.00;
	float z = -TA.Money;
	CE_Game_KK();
	int k11 = 0;
	while (k11 < 3)
	{
		system("cls");
		printf("\n\t\t\t已经收取您的%0.2f欢乐豆，已告知。\n", z);
		printf("\n\n\t\t\t请输入你要出的拳头：___\b\b\b\n");
		printf("\n\n\t1:剪刀\n\n\n\t2:石头\n\n\n\t3:布\n\n\n\t0:不玩了\n");
		scanf("%d", &gamer) || scanf("%c", gamer);
		switch (gamer)
		{
		case 1:
			k11 = 3;
			break;
		case 2:
			k11 = 3;
			break;
		case 3:
			k11 = 3;
			break;
		case 0:
			system("cls");
			exit(0);
		default:
			printf("你的选择为 %d 选择错误\n", gamer);
			k11++;
			break;
		}
	}
	printf("电脑出了—");
	switch (computer)
	{
	case 1:
		printf("【剪刀】");
		break;
	case 2:
		printf("【石头】");
		break;
	case 3:
		printf("【布】");
		break;
	}
	printf("你出了—");
	switch (gamer)
	{
	case 1:
		printf("【剪刀】\n");
		break;
	case 2:
		printf("【石头】\n");
		break;
	case 3:
		printf("【布】\n");
		break;
	}
	if ((computer == 1 && gamer == 2) || (computer == 2 && gamer == 3) || (computer == 3 && gamer == 1))
	{
		printf("\t\t\t\t\t\t》【你赢了!】《\n\n");
		TA.Money = CM * 2.00;
		float z = TA.Money;
		curAccount->balance = curAccount->balance + TA.Money;
		printf("\n\t\t\t你获得的奖金%0.2f欢乐豆，请查收！\n", z);
		CE_Game_Transaction();
		int a, k = 0;
		while (k < 3)
		{
			printf("\n\n\t\t【1】再来一局\n");
			printf("\n\n\t\t【2】退出游戏\n");
			printf("\n\n\t\t【3】返回主页\n");
			printf("\n\n\t\t【0】退出系统\n");
			printf("\n\n\t\t\t你的选择：___\b\b\b");
			scanf("%d", &a);
			switch (a)
			{
			case 1:
				system("cls");
				STJDB();
				k = 3;
				break;
			case 2:
				system("cls");
				CE_Game();
				k = 3;
				break;
			case 3:
				system("cls");
				C_Main_Menu();
				k = 3;
				break;
			case 0:
				system("cls");
				k = 3;
				CE_Save_User_Data();
				exit(0);
			default:
				k++;
				break;
			}
		}
	}
	else if (gamer == computer)
	{
		printf("\t\t\t\t\t\t》【平手】《\n\n");
		TA.Money = CM * 1.00 + 100.00;
		float z = TA.Money;
		curAccount->balance = curAccount->balance + TA.Money;
		printf("\n\t\t\t你获得的奖励金并已退回筹码共%0.2f欢乐豆，请查收！\n", z);
		CE_Game_Transaction();
		int a, k = 0;
		while (k < 3)
		{
			printf("\n\n\t\t【1】再来一局\n");
			printf("\n\n\t\t【2】退出游戏\n");
			printf("\n\n\t\t【3】返回主页\n");
			printf("\n\n\t\t【0】退出系统\n");
			printf("\n\n\t\t\t你的选择：___\b\b\b");
			scanf("%d", &a);
			switch (a)
			{
			case 1:
				system("cls");
				STJDB();
				k = 3;
				break;
			case 2:
				system("cls");
				CE_Game();
				k = 3;
				break;
			case 3:
				system("cls");
				C_Main_Menu();
				k = 3;
				break;
			case 0:
				system("cls");
				k = 3;
				CE_Save_User_Data();
				exit(0);
			default:
				k++;
				break;
			}
		}
	}
	else
	{
		printf("\t\t\t\t\t\t》【你输掉了】《\n\n");
		int a, k = 0;
		while (k < 3)
		{
			printf("\n\n\t\t【1】再来一局\n");
			printf("\n\n\t\t【2】退出游戏\n");
			printf("\n\n\t\t【3】返回主页\n");
			printf("\n\n\t\t【0】退出系统\n");
			printf("\n\n\t\t\t你的选择：___\b\b\b");
			scanf("%d", &a);
			switch (a)
			{
			case 1:
				system("cls");
				STJDB();
				k = 3;
				break;
			case 2:
				system("cls");
				CE_Game();
				k = 3;
				break;
			case 3:
				system("cls");
				C_Main_Menu();
				k = 3;
				break;
			case 0:
				system("cls");
				k = 3;
				CE_Save_User_Data();
				exit(0);
			default:
				k++;
				break;
			}
		}
	}
}

//打字游戏
void DZ() {
	const int ESCKEY = 27; //定义整型常量ESCKEY，赋值为ESC键的ASCII编码
	int pos, posmax = 72;  //当前位置，右边界最大位置
	int win = 0, loss = 0; //已赢局数和已输局数
	getchar();
	int ch = 0, key = 0; //随机字符，玩家键入字符
	srand(time(0)); //设置随机数种子
	while (key != ESCKEY)//主循环。key 不是 ESC键时玩游戏
	{
		ch = rand() % ('z' + 1 - 'a') + 'a'; //产生随机字符
		for (pos = 0; pos < posmax && key != 27; pos++)
		{
			printf("\b--%c", (char)ch);
			pos++;
			Sleep(150);
			if (kbhit() && (key = getch()) == ch)
			{
				win++;
				printf("*\a");//输出 * 并响铃
				break;
			}
		}
		if (key == ESCKEY) //用户键入ESC键，需要确认
		{
			printf("\n结束游戏吗？\n");
			printf("\n\n\t\t【1】是\n");
			printf("\n\n\t\t【2】否");
			while ((key = tolower(getchar())) != '1' && ch != '2')
				;    //空循环体
			key = (key == '1' ? ESCKEY : 0);
		}
		if (pos >= posmax)
		{
			loss++;
		}
		printf("\n");
	}
	int win1 = win / 10 - 1;
	if (win1 < 0)
		win1 = 0;
	TA.Money = win1 * 100.00;
	float z = TA.Money;
	curAccount->balance = curAccount->balance + TA.Money;
	printf("字符练习个数：%d\n", win + loss);
	printf("正确键入个数：%d\n", win);
	printf("\n\t\t\t你获得的奖励为：%0.2f欢乐豆，请查收！\n", z);
	CE_Game_Transaction();
	int a, k = 0;
	while (k < 3)
	{
		printf("\n\n\t\t【1】重新开始游戏\n");
		printf("\n\n\t\t【2】退出游戏\n");
		printf("\n\n\t\t【3】返回主页\n");
		printf("\n\n\t\t【0】退出系统\n");
		printf("\n\n\t\t\t你的选择：___\b\b\b");
		scanf("%d", &a);
		switch (a)
		{
		case 1:
			system("cls");
			DZ();
			k = 3;
			break;
		case 2:
			system("cls");
			CE_Game();
			k = 3;
			break;
		case 3:
			system("cls");
			C_Main_Menu();
			k = 3;
			break;
		case 0:
			system("cls");
			k = 3;
			CE_Save_User_Data();
			exit(0);
		default:
			k++;
			break;
		}
	}



	printf("游戏结束，谢谢使用\n");
}

//游戏扣款
void CE_Game_KK()
{
	CE_Time();
	if (curAccount->balance + TA.Money < 0)
	{
		int k = 0, b;
		system("cls");
		printf("\n\n\n欢乐豆不足!!!!\n");
		while (k < 3)
		{
			printf("\n\n\n\t\t【1】去存豆");
			printf("\n\n\n\t\t【2】返回上一页");
			printf("\n\n\n\t\t【3】返回主页");
			printf("\n\n\n\t\t【0】退出系统\n");
			printf("\n\n\t\t\t你的选择：___\b\b\b");
			scanf("%d", &b);
			switch (b)
			{
			case 1:
				system("cls");
				C_DepositMoney();
				k = 3;
				break;
			case 2:
				system("cls");
				CE_Game();
				k = 3;
				break;
			case 3:
				system("cls");
				C_Main_Menu();
				k = 3;
				break;
			case 0:
				k = 3;
				CE_Save_User_Data();
				exit(0);
			default:
				k++;
				break;
			}
		}
	}
	else
	{
		curAccount->balance = curAccount->balance + TA.Money;
		system("cls");
		CE_GameOut_Transaction();
	}
}

//中英文游戏支出流水记录
void CE_GameOut_Transaction()
{
	Trade* TP = (Trade*)malloc(sizeof(Trade));
	TP->Tnext = NULL;
	if (Thead == NULL)
	{
		Thead = TP;
		Ttail = TP;
	}
	else
	{
		CE_Time();
		Ttail->Tnext = TP;
		Ttail = TP;//我滴天哪
		strcpy(TP->Taccount_number, curAccount->account_number);
		strcpy(TP->Time, TA.Time);
		strcpy(TP->Operation, "GB");
		TP->Money = TA.Money;
		strcpy(TP->TarUse, "本账户");
		CE_Save_Transaction_Data();
	}
}

//中英文游戏收入流水记录
void CE_Game_Transaction()
{
	Trade* TP = (Trade*)malloc(sizeof(Trade));
	TP->Tnext = NULL;
	if (Thead == NULL)
	{
		Thead = TP;
		Ttail = TP;
	}
	else
	{
		CE_Time();
		Ttail->Tnext = TP;
		Ttail = TP;//我滴天哪
		strcpy(TP->Taccount_number, curAccount->account_number);
		strcpy(TP->Time, TA.Time);
		strcpy(TP->Operation, "GA");
		TP->Money = TA.Money;
		strcpy(TP->TarUse, "本账户");
		CE_Save_Transaction_Data();
	}
}

//简洁版光标定位
void getPassword(char* storePw, int maxPwLen)
{
	char c = '\0';          //存放用户键入的每个字符
	char* pc = storePw;    //为方便指向密码字符串中每个字符
	int pwlen = 0;          //当前password的长度

	while (1)
	{
		c = getch();

		//如果用户按下回车符，停止循环
		if (c == '\r')
			break;

		//将用户输入的有效字符存入密码串，不考虑空字符'\0'
		if (pwlen >= 0 && pwlen < maxPwLen - 1 && c)
		{
			*pc = c;
			pc++;
			pwlen++;
			putchar('*');
		}
	}
}

//查找当前账户
int findAccount(Account IV1)//登录时查找当前账户
{
	Account* curP = head;
	Trade* TcurP = Thead;
	while (curP != NULL)
	{
		if (strcmp(curP->account_number, IV1.account_number) == 0)
		{
			return 1;
		}
		curP = curP->next;
	}
	return 0;
}

//验证当前账户密码
int findPassword(Account IV1)//登录时查找当前账户密码
{
	Account* curP = head;
	while (curP != NULL)
	{
		if (strcmp(curP->account_number, IV1.account_number) == 0 && strcmp(curP->password, IV1.password) == 0)
		{
			curAccount = curP;
			return 1;
		}
		curP = curP->next;
	}
	return 0;
}

//查找是否被已有账户
int findAccount2(Account IV)
{
	Account* curP = head;
	while (curP != NULL)
	{
		if (strcmp(curP->account_number, IV.account_number) == 0)
		{
			return 1;
		}
		curP = curP->next;
	}
	return 0;
}

//查找转账对象
int findAccount3(Account TT)
{
	Account* curP = head;
	while (curP != NULL)
	{
		if (strcmp(curAccount->account_number, TT.account_number) == 0)
		{
			int b, k = 0;
			if (Language == 1)
				printf("\n不能给自己转账！！！\n");
			else
				printf("\nYou can't transfer money to yourself! ! !\n");
			while (k < 3)
			{
				if (Language == 1)
